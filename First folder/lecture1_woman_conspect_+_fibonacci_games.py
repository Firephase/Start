# -*- coding: utf-8 -*-
"""Lecture1_woman_conspect + fibonacci games.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TdFHfoUaFhiC2yw23LOyUMTAq4bW9Rci
"""

def do_it_better(func):
  def wrapper(param1=0,param2=0):
      for i in range(10):
        func(param1,param2)
        print()
  return wrapper

@do_it_better
def message(param1=0,param2=0):
    print('I am  here')

message()
@do_it_better
def merge(word1,word2):
  print(word1+word2)
merge('alef', 'beit')
print('as;dfhys')
merge('alef','beit')

@do_it_better
def my_func(param1,param2=0):
    print(param1)
my_func('I am writing something')

def decorator_constructor(dec_param1,dec_param2):
  print("I am a dec maker \n", "external params are:", dec_param1, "and",dec_param2,"\n")
  def decorator(func):
      print("I am an internal dec \n")
      def wrapper(func_arg1,func_arg2):

        print("ext params are ::::::: ", dec_param1, dec_param2)
        print("func params are", func_arg1,'and ', func_arg2)
        func(func_arg1,func_arg2)
      return wrapper
  return decorator

@decorator_constructor('Ext1','Ext2')
def test_fun(arg1,arg2):
    print('internal function params are:', arg1, 'and', arg2, "\n")

test_fun('goal', 'love')


@decorator_constructor('Ext3','Ext4')
def test_fun(arg1,arg2):
    print('internal function params are:', arg1, 'and', arg2, "\n")

test_fun('goal', 'love')


test_fun('a','b')

class Cat:
    def __init__(self, name='', age=0):
        self.name = name
        self.age = age
    def __add__(self,other):
        return Cat(self.name+ "+" + other.name,self.age+other.age)
    def __repr__(self):
      return f"Cat({self.name},{self.age})"
    def __call__(self): #call an object as a function
        print("ХУЙ")

cat1 = Cat('Max',2)
cat2 = Cat('Bantiec',1)
cat3 = cat1+cat2
print(cat3.name,cat3.age)
cat1()

dir()
a = 13
dir()

del a
dir()

del _1
dir()

del _4
dir()

_i3
_5

_iii
_oh

help(_oh)

x = 4
id(x)
x = 2*x
id(x)

id(x)

id(3*x)

id(x)

id(3*x)

id(4*x)

for i in range(100):
  print(i, id(i*x), sep = ' and ')

del 30*x #there is no such an object

import numpy as np
def period(n):
  arr = np.zeros((n**2,2))
  arr[0][0]=0
  arr[0][1]=1
  arr[1][0]=1
  arr[1][1]=1
  s = 2
  #print(arr[0],arr[1],sep='\n')
  while not( arr[s-1][0] == arr[0][0] and arr[s-1][1] == arr[0][1]):
    arr[s][0] = arr[s-1][1]
    arr[s][1] = (arr[s-1][0] + arr[s-1][1])%n
    #print(arr[s])
    s += 1
  #print(arr,sep='\n')
  print(s - 1)
  return s - 1


def is_prime(n):
    for i in range(2,n-1):
      if n%i == 0:
        return 0
    return 1

for i in range(2,100):
  if (is_prime(i)):
    print('period for', i,'is',period(i))

for j in range(2,40):
    if(is_prime(j)):
      for i in range(1,4):
        print('period for', j**i,'is',period(j**i))

import matplotlib.pyplot as plt
import array

n = int(input())
x = array.array('i')
y = array.array('i')
for i in range(2,n,):
    if (is_prime(i)):
      x.append(i)
      y.append(period(i))


print(x)
print(y)


plt.plot(x,y)
#plt.ylabel(y)
plt.show()

n = int(input())
while n > 0:
  period(n)
  n = int(input())

n = int(input())
while n > 0:
    print('period of n is',period(n))
    n = int(input())